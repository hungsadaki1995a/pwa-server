{"version":3,"sources":["webpack:///./src/index.ts","webpack:///./src/router/album.router.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;GAEG;AAC4B;AACN;AACyB;AAEjD,MAAM,GAAG,GAAG,8CAAO,EAAE,CAAC;AACtB,GAAG,CAAC,GAAG,CAAC,2CAAI,EAAE,CAAC,CAAC;AAEhB,GAAG,CAAC,GAAG,CAAC,8CAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AAExB,MAAM,IAAI,GAAG,MAAgB,IAAI,KAAI,CAAC;AACtC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACnC,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC;AAIJ,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,+DAAW,CAAC,CAAC;AAuB9B,IAAI,IAAU,EAAE;IACd,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;IACpB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;CAC1C;;;;;;;;;;;;;;;;;;;;;;;;AC7C4B;AACJ;AACQ;AAE3B,MAAM,WAAW,GAAG,8CAAO,CAAC,MAAM,EAAE,CAAC;AAE5C,MAAM,IAAI,GAAG,IAAI,uCAAI,CAAC;IACrB,gBAAgB,EAAE,wJAAwJ;IAC1K,GAAG,EAAE;QACJ,kBAAkB,EAAE,KAAK;KACzB;CACD,CAAC;AAEF,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;IACxC,IAAI;QACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACnF,GAAG,CAAC,MAAM,CAAC,+CAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,CAAC,OAAO,EAAE,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACX,GAAG,CAAC,MAAM,CAAC,+CAAS,CAAC,iCAAiC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;KACxE;AACF,CAAC,EAAC;AAEF,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;IACzC,IAAI;QACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACtB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,MAAM,WAAW,GAAG,6CAA6C,IAAI,CAAC,IAAI,KAAK,CAAC;QAChF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,+CAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,EAAE,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACX,GAAG,CAAC,MAAM,CAAC,+CAAS,CAAC,iCAAiC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;KACxE;AACF,CAAC,EAAC;AAEF,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;IAC3C,IAAI;QACH,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,MAAM,WAAW,GAAG,2CAA2C,OAAO,EAAE,CAAC;QACzE,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,+CAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,OAAO,EAAE,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACX,GAAG,CAAC,MAAM,CAAC,+CAAS,CAAC,iCAAiC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;KACxE;AACF,CAAC,EAAC;AAEF,WAAW,CAAC,GAAG,CAAC,aAAa,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;IAClD,IAAI;QACH,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,MAAM,WAAW,GAAG,+CAA+C,OAAO,EAAE,CAAC;QAC7E,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,+CAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,CAAC,OAAO,EAAE,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACX,GAAG,CAAC,MAAM,CAAC,+CAAS,CAAC,iCAAiC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;KACxE;AACF,CAAC,EAAC","file":"main.d46547e6c7dc649b0c0c.hot-update.js","sourcesContent":["/**\r\n * Required External Modules\r\n */\r\n import express from 'express';\r\n import cors from 'cors';\r\nimport { albumRouter } from 'router/album.router';\r\n \r\n const app = express();\r\n app.use(cors());\r\n\r\n app.use(express.json());\r\n\r\n const port = process.env.PORT || 3600;\r\n const server = app.listen(port, () => {\r\n   console.log(`Listening on port ${port}`);\r\n });\r\n \r\n\r\n\r\napp.use('/album', albumRouter);\r\n \r\n \r\n /**\r\n  * Webpack HMR Activation => For DEV on local\r\n  */\r\n type ModuleId = string | number;\r\n \r\n interface WebpackHotModule {\r\n     hot?: {\r\n       data: any;\r\n       accept(\r\n         dependencies: string[],\r\n         callback?: (updatedDependencies: ModuleId[]) => void,\r\n       ): void;\r\n       accept(dependency: string, callback?: () => void): void;\r\n       accept(errHandler?: (err: Error) => void): void;\r\n       dispose(callback: (data: any) => void): void;\r\n     };\r\n }\r\n // @ts-ignore\r\n declare const module: WebpackHotModule;\r\n \r\n if (module.hot) {\r\n   module.hot.accept();\r\n   module.hot.dispose(() => server.close());\r\n }\r\n","import express from 'express';\r\nimport { Pool } from 'pg';\r\nimport { constants } from \"http2\";\r\n\r\nexport const albumRouter = express.Router();\r\n\r\nconst pool = new Pool({\r\n\tconnectionString: 'postgres://ohzdvanjcvhgww:f2b54928cdbd5258f3a4e05c7c340d1c8d13a55186cab1a806bd0b089bca98de@ec2-3-214-3-162.compute-1.amazonaws.com:5432/d9dlljd2n92mbj',\r\n\tssl: {\r\n\t\trejectUnauthorized: false\r\n\t}\r\n})\r\n\r\nalbumRouter.get('/', async (req, res) => {\r\n\ttry {\r\n\t\tconst client = await pool.connect();\r\n\t\tconst result = await client.query('SELECT * FROM album_category ORDER BY id DESC');\r\n\t\tres.status(constants.HTTP_STATUS_OK).send(result.rows);\r\n\t\tclient.release();\r\n\t} catch (e) {\r\n\t\tres.status(constants.HTTP_STATUS_INTERNAL_SERVER_ERROR).send(e.message);\r\n\t}\r\n})\r\n\r\nalbumRouter.post('/', async (req, res) => {\r\n\ttry {\r\n\t\tconst body = req.body;\r\n\t\tconst client = await pool.connect();\r\n\t\tconst queryString = `INSERT INTO album_category(name) values(\\'${body.name}\\')`;\r\n\t\tconst result = await client.query(queryString);\r\n\t\tres.status(constants.HTTP_STATUS_OK).send({});\r\n\t\tclient.release();\r\n\t} catch (e) {\r\n\t\tres.status(constants.HTTP_STATUS_INTERNAL_SERVER_ERROR).send(e.message);\r\n\t}\r\n})\r\n\r\nalbumRouter.get('/:id', async (req, res) => {\r\n\ttry {\r\n\t\tconst albumId = req.params.id;\r\n\t\tconst client = await pool.connect();\r\n\t\tconst queryString = `SELECT * FROM album_category WHERE id = ${albumId}`;\r\n\t\tconst result = await client.query(queryString);\r\n\t\tres.status(constants.HTTP_STATUS_OK).send(result.rows[0]);\r\n\t\tclient.release();\r\n\t} catch (e) {\r\n\t\tres.status(constants.HTTP_STATUS_INTERNAL_SERVER_ERROR).send(e.message);\r\n\t}\r\n})\r\n\r\nalbumRouter.get('/:id/images', async (req, res) => {\r\n\ttry {\r\n\t\tconst albumId = req.params.id;\r\n\t\tconst client = await pool.connect();\r\n\t\tconst queryString = `SELECT * FROM album_images WHERE album_id = ${albumId}`;\r\n\t\tconst result = await client.query(queryString);\r\n\t\tres.status(constants.HTTP_STATUS_OK).send(result.rows);\r\n\t\tclient.release();\r\n\t} catch (e) {\r\n\t\tres.status(constants.HTTP_STATUS_INTERNAL_SERVER_ERROR).send(e.message);\r\n\t}\r\n})\r\n"],"sourceRoot":""}